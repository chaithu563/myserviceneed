/*//////////////////////////////////////////////////////////////////////////////////////
//////     Autogenerated by JaySvcUtil http://JayData.org for more info        /////////
//////                      OData  V4  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/

declare module $data{
    class Geography{}
    class GeographyLineString{}
    class GeographyPolygon{}
    class GeographyMultiPoint{}
    class GeographyMultiPolygon{}
    class GeographyMultiLineString{}
    class GeographyCollection{}

    class Geometry{}
    class GeometryLineString{}
    class GeometryPolygon{}
    class GeometryMultiPoint{}
    class GeometryMultiPolygon{}
    class GeometryMultiLineString{}
    class GeometryCollection{}

    const enum EntityState{
        Detached = 0,
        Unchanged = 10,
        Added = 20,
        Modified = 30,
        Deleted = 40
    }

    interface MemberDefinition{
        name: string;
        type: any;
        dataType: any;
        elementType: any;
        originalType: any;
        kind: string;
        classMember: boolean;
        set: (value:any) => void;
        get: () => any;
        value: any;
        initialValue: any;
        method: Function;
        enumerable: boolean;
        configurable: boolean;
        key: boolean;
        computed: boolean;
        storeOnObject: boolean;
        monitorChanges: boolean;
    }

    interface Event{
        attach(eventHandler: (sender: any, event: any) => void ): void;
        detach(eventHandler: () => void ): void;
        fire(e: any, sender: any): void;
    }

    class Base<T>{
        constructor();
        getType: () => typeof Base;

        static addProperty(name:string, getterOrType:string | Function, setterOrGetter?:Function, setter?:Function): void;
        static addMember(name:string, definition:any, isClassMember?:boolean): void;
        static describeField(name:string, definition:any): void;

        static hasMetadata(key:string, property?:string): boolean;
        static getAllMetadata(property?:string): any;
        static getMetadata(key:string, property?:string): any;
        static setMetadata(key:string, value:any, property?:string): void;
    }

    class Enum extends Base<Enum>{
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Enum>;
    }
    function createEnum(name:string, enumType:any, enumDefinition?:any): Base<Enum>;

    class Entity extends Base<Entity>{
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<Entity>;

        entityState: EntityState;
        changedProperties: MemberDefinition[];

        propertyChanging: Event;
        propertyChanged: Event;
        propertyValidationError: Event;
        isValid: boolean;
    }

    class EntitySet<Ttype extends typeof Entity, T extends Entity> extends Queryable<T>{
        add(item: T): T;
        add(initData: {}): T;
        attach(item: T): void;
        attach(item: {}): void;
        attachOrGet(item: T): T;
        attachOrGet(item: {}): T;
        detach(item: T): void;
        detach(item: {}): void;
        remove(item: T): void;
        remove(item: {}): void;
        elementType: Ttype;
    }

    class EntityContext extends Base<EntityContext>{
        constructor(config?: any);
        onReady(): Promise<EntityContext>;
        saveChanges(): Promise<number>;
        stateManager: {reset: Function};
        static extend(name:string, instanceDefinition:any, classDefinition?:any): Base<EntityContext>;
    }

    class Queryable<T extends Entity | Edm.Primitive>{
        filter(predicate: (it: T) => boolean, thisArg?: any): Queryable<T>;
        filter(predicate: string, thisArg?: any): Queryable<T>;
        map(projection: (it: T) => any): Queryable<any>;
        map(projection: string): Queryable<any>;
        orderBy(predicate: (it: T) => void): Queryable<T>;
        orderBy(predicate: string): Queryable<T>;
        orderByDescending(predicate: (it: T) => void): Queryable<T>;
        orderByDescending(predicate: string): Queryable<T>;
        include(selector: string): Queryable<T>;
        skip(amount: number): Queryable<T>;
        take(amount: number): Queryable<T>;
        forEach(handler: (it: T) => void): Promise<T>;
        length(): Promise<number>;
        toArray(): Promise<T[]>;
        single(predicate: (it: T) => boolean, params?: any): Promise<T>;
        single(predicate: string, params?: any): Promise<T>;
        first(predicate?: (it: T) => boolean, params?: any): Promise<T>;
        first(predicate?: string, params?: any): Promise<T>;
        removeAll(): Promise<number>;
    }
    class ServiceAction{}
    class ServiceFunction{}

    function implementation(name:string): typeof Base;
}
export {$data as $data}

declare type JSDate = Date;

declare module Edm {
    type Boolean = boolean;
    type Binary = Uint8Array;
    type DateTime = JSDate;
    type DateTimeOffset = JSDate;
    type Duration = string;
    type TimeOfDay = string;
    type Date = string;
    type Time = string;
    type Decimal = string;
    type Single = number;
    type Float = number;
    type Double = number;
    type Guid = string;
    type Int16 = number;
    type Int32 = number;
    type Int64 = string;
    type Byte = number;
    type SByte = number;
    type String = string;
    type GeographyPoint = $data.Geography;
    type GeographyLineString = $data.GeographyLineString;
    type GeographyPolygon = $data.GeographyPolygon;
    type GeographyMultiPoint = $data.GeographyMultiPoint;
    type GeographyMultiPolygon = $data.GeographyMultiPolygon;
    type GeographyMultiLineString = $data.GeographyMultiLineString;
    type GeographyCollection = $data.GeographyCollection;
    type GeometryPoint = $data.Geometry;
    type GeometryLineString = $data.GeometryLineString;
    type GeometryPolygon = $data.GeometryPolygon;
    type GeometryMultiPoint = $data.GeometryMultiPoint;
    type GeometryMultiPolygon = $data.GeometryMultiPolygon;
    type GeometryMultiLineString = $data.GeometryMultiLineString;
    type GeometryCollection = $data.GeometryCollection;
    type Primitive =
        Boolean | Binary | Guid | DateTime | DateTimeOffset | Duration | TimeOfDay | Date | Time |
        Decimal | Single | Float | Double | Int16 | Int32 | Int64 | Byte | SByte | String |
        GeographyPoint | GeographyLineString | GeographyPolygon | GeographyMultiPoint | GeographyMultiLineString | GeographyMultiPolygon | GeographyCollection |
        GeometryPoint | GeometryLineString | GeometryPolygon | GeometryMultiPoint | GeometryMultiLineString | GeometryMultiPolygon | GeometryCollection;
}
export {Edm as Edm}

declare module MSNAdmin.Models {

    export class USERSERVICENEED extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; SERVICELOCATION?: Edm.String; SERVICETITLE?: Edm.String; SERVICEDESCRIPTION?: Edm.String; SERVICECATEGORYID?: Edm.Decimal; SERVICESUBCATEGORYID?: Edm.Decimal; MINBUDGET?: Edm.Decimal; MAXBUDGET?: Edm.Decimal; SERVICESTATE?: Edm.Int32; SERVICETIMETYPE?: Edm.Int32; ALLOCATEDBIDID?: Edm.Decimal; SERVICEBIDs?: MSNAdmin.Models.SERVICEBID[]; SERVICEBID?: MSNAdmin.Models.SERVICEBID; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; SERVICESTATE1?: MSNAdmin.Models.SERVICESTATE; SERVICESUBCATEGORY?: MSNAdmin.Models.SERVICESUBCATEGORY; SERVICETIMETYPE1?: MSNAdmin.Models.SERVICETIMETYPE; USERINFO?: MSNAdmin.Models.USERINFO; USERSERVICETIMEREOCRDs?: MSNAdmin.Models.USERSERVICETIMEREOCRD[] });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        SERVICELOCATION: Edm.String;
        SERVICETITLE: Edm.String;
        SERVICEDESCRIPTION: Edm.String;
        SERVICECATEGORYID: Edm.Decimal;
        SERVICESUBCATEGORYID: Edm.Decimal;
        MINBUDGET: Edm.Decimal;
        MAXBUDGET: Edm.Decimal;
        SERVICESTATE: Edm.Int32;
        SERVICETIMETYPE: Edm.Int32;
        ALLOCATEDBIDID: Edm.Decimal;
        SERVICEBIDs: MSNAdmin.Models.SERVICEBID[];
        SERVICEBID: MSNAdmin.Models.SERVICEBID;
        SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
        SERVICESTATE1: MSNAdmin.Models.SERVICESTATE;
        SERVICESUBCATEGORY: MSNAdmin.Models.SERVICESUBCATEGORY;
        SERVICETIMETYPE1: MSNAdmin.Models.SERVICETIMETYPE;
        USERINFO: MSNAdmin.Models.USERINFO;
        USERSERVICETIMEREOCRDs: MSNAdmin.Models.USERSERVICETIMEREOCRD[];
    }

    export class USERSERVICE extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; SERVICECATEGORYID?: Edm.Decimal; SERVICESUBCATEGORYID?: Edm.Decimal; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; SERVICESUBCATEGORY?: MSNAdmin.Models.SERVICESUBCATEGORY; USERINFO?: MSNAdmin.Models.USERINFO });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        SERVICECATEGORYID: Edm.Decimal;
        SERVICESUBCATEGORYID: Edm.Decimal;
        SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
        SERVICESUBCATEGORY: MSNAdmin.Models.SERVICESUBCATEGORY;
        USERINFO: MSNAdmin.Models.USERINFO;
    }

    export class USERMEMBERSHIP extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; MEMBERSHIPID?: Edm.Decimal; COMMENTS?: Edm.String; STARTDATE?: Edm.DateTimeOffset; ENDDATE?: Edm.DateTimeOffset; MEMBERSHIP?: MSNAdmin.Models.MEMBERSHIP; USERINFO?: MSNAdmin.Models.USERINFO });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        MEMBERSHIPID: Edm.Decimal;
        COMMENTS: Edm.String;
        STARTDATE: Edm.DateTimeOffset;
        ENDDATE: Edm.DateTimeOffset;
        MEMBERSHIP: MSNAdmin.Models.MEMBERSHIP;
        USERINFO: MSNAdmin.Models.USERINFO;
    }

    export class ADMININFO extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; EMAIL?: Edm.String; PHONE?: Edm.String; PWD?: Edm.String });

        ID: Edm.Decimal;
        NAME: Edm.String;
        EMAIL: Edm.String;
        PHONE: Edm.String;
        PWD: Edm.String;
    }

    export class USERINFO extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; EMAIL?: Edm.String; PHONE?: Edm.String; CITYID?: Edm.Decimal; CITYAREAID?: Edm.Decimal; LOGINTYPEID?: Edm.Int32; CURRENTLOCATION?: Edm.String; CITY?: MSNAdmin.Models.CITY; CITYAREA?: MSNAdmin.Models.CITYAREA; SERVICEBIDs?: MSNAdmin.Models.SERVICEBID[]; SOCIALLOGIN?: MSNAdmin.Models.SOCIALLOGIN; USERBIDS?: MSNAdmin.Models.USERBID[]; USERFUNDS?: MSNAdmin.Models.USERFUND[]; USERMEMBERSHIPs?: MSNAdmin.Models.USERMEMBERSHIP[]; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[]; USERPWDs?: MSNAdmin.Models.USERPWD[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        EMAIL: Edm.String;
        PHONE: Edm.String;
        CITYID: Edm.Decimal;
        CITYAREAID: Edm.Decimal;
        LOGINTYPEID: Edm.Int32;
        CURRENTLOCATION: Edm.String;
        CITY: MSNAdmin.Models.CITY;
        CITYAREA: MSNAdmin.Models.CITYAREA;
        SERVICEBIDs: MSNAdmin.Models.SERVICEBID[];
        SOCIALLOGIN: MSNAdmin.Models.SOCIALLOGIN;
        USERBIDS: MSNAdmin.Models.USERBID[];
        USERFUNDS: MSNAdmin.Models.USERFUND[];
        USERMEMBERSHIPs: MSNAdmin.Models.USERMEMBERSHIP[];
        USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
        USERPWDs: MSNAdmin.Models.USERPWD[];
    }

    export class USERFUND extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; BALANCE?: Edm.Decimal; USERINFO?: MSNAdmin.Models.USERINFO });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        BALANCE: Edm.Decimal;
        USERINFO: MSNAdmin.Models.USERINFO;
    }

    export class USERBID extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; BIDS?: Edm.Int32; USERINFO?: MSNAdmin.Models.USERINFO });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        BIDS: Edm.Int32;
        USERINFO: MSNAdmin.Models.USERINFO;
    }

    export class SOCIALLOGIN extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Int32; NAME?: Edm.String; DESCRIPTION?: Edm.String; USERINFOes?: MSNAdmin.Models.USERINFO[] });

        ID: Edm.Int32;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        USERINFOes: MSNAdmin.Models.USERINFO[];
    }

    export class SERVICETIMETYPE extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Int32; NAME?: Edm.String; DESCRIPTION?: Edm.String; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[] });

        ID: Edm.Int32;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    }

    export class SERVICESUBCATEGORY extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; DESCRIPTION?: Edm.String; SERVICECATEGORYID?: Edm.Decimal; SERVICECATEGORY?: MSNAdmin.Models.SERVICECATEGORY; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        SERVICECATEGORYID: Edm.Decimal;
        SERVICECATEGORY: MSNAdmin.Models.SERVICECATEGORY;
        USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    }

    export class SERVICESTATE extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Int32; NAME?: Edm.String; DESCRIPTION?: Edm.String; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[] });

        ID: Edm.Int32;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    }

    export class SERVICECATEGORY extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; DESCRIPTION?: Edm.String; SERVICESUBCATEGORies?: MSNAdmin.Models.SERVICESUBCATEGORY[]; USERSERVICEs?: MSNAdmin.Models.USERSERVICE[]; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        SERVICESUBCATEGORies: MSNAdmin.Models.SERVICESUBCATEGORY[];
        USERSERVICEs: MSNAdmin.Models.USERSERVICE[];
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    }

    export class SERVICEBID extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; USERSERVICENEEDID?: Edm.Decimal; BIDTITLE?: Edm.String; BIDDESCRIPTION?: Edm.String; BIDAMOUNT?: Edm.Decimal; USERINFO?: MSNAdmin.Models.USERINFO; USERSERVICENEED?: MSNAdmin.Models.USERSERVICENEED; USERSERVICENEEDs?: MSNAdmin.Models.USERSERVICENEED[] });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        USERSERVICENEEDID: Edm.Decimal;
        BIDTITLE: Edm.String;
        BIDDESCRIPTION: Edm.String;
        BIDAMOUNT: Edm.Decimal;
        USERINFO: MSNAdmin.Models.USERINFO;
        USERSERVICENEED: MSNAdmin.Models.USERSERVICENEED;
        USERSERVICENEEDs: MSNAdmin.Models.USERSERVICENEED[];
    }

    export class USERSERVICETIMEREOCRD extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; SERVICEID?: Edm.Decimal; SERVICENEEDEDDATE?: Edm.DateTimeOffset; SERVICESTARTDATE?: Edm.DateTimeOffset; SERVICEENDDATE?: Edm.DateTimeOffset; SERVICESTARTTIME?: Edm.Duration; SERVICEENDTIME?: Edm.Duration; USERSERVICENEED?: MSNAdmin.Models.USERSERVICENEED });

        ID: Edm.Decimal;
        SERVICEID: Edm.Decimal;
        SERVICENEEDEDDATE: Edm.DateTimeOffset;
        SERVICESTARTDATE: Edm.DateTimeOffset;
        SERVICEENDDATE: Edm.DateTimeOffset;
        SERVICESTARTTIME: Edm.Duration;
        SERVICEENDTIME: Edm.Duration;
        USERSERVICENEED: MSNAdmin.Models.USERSERVICENEED;
    }

    export class USERPWD extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; USERID?: Edm.Decimal; PWD?: Edm.String; USERINFO?: MSNAdmin.Models.USERINFO });

        ID: Edm.Decimal;
        USERID: Edm.Decimal;
        PWD: Edm.String;
        USERINFO: MSNAdmin.Models.USERINFO;
    }

    export class MEMBERSHIP extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; DESCRIPTION?: Edm.String; USERMEMBERSHIPs?: MSNAdmin.Models.USERMEMBERSHIP[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        USERMEMBERSHIPs: MSNAdmin.Models.USERMEMBERSHIP[];
    }

    export class CITYAREA extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; DESCRIPTION?: Edm.String; CITYID?: Edm.Decimal; CITY?: MSNAdmin.Models.CITY; USERINFOes?: MSNAdmin.Models.USERINFO[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        DESCRIPTION: Edm.String;
        CITYID: Edm.Decimal;
        CITY: MSNAdmin.Models.CITY;
        USERINFOes: MSNAdmin.Models.USERINFO[];
    }

    export class CITY extends $data.Entity {
        constructor();
        constructor(initData: { ID?: Edm.Decimal; NAME?: Edm.String; CITYAREAs?: MSNAdmin.Models.CITYAREA[]; USERINFOes?: MSNAdmin.Models.USERINFO[] });

        ID: Edm.Decimal;
        NAME: Edm.String;
        CITYAREAs: MSNAdmin.Models.CITYAREA[];
        USERINFOes: MSNAdmin.Models.USERINFO[];
    }

}
export {MSNAdmin as MSNAdmin}

declare module MSN {

    export class Container extends $data.EntityContext {
        onReady(): Promise<Container>;

        CITies: $data.EntitySet<typeof MSNAdmin.Models.CITY, MSNAdmin.Models.CITY>;
        CITYAREAs: $data.EntitySet<typeof MSNAdmin.Models.CITYAREA, MSNAdmin.Models.CITYAREA>;
        MEMBERSHIPs: $data.EntitySet<typeof MSNAdmin.Models.MEMBERSHIP, MSNAdmin.Models.MEMBERSHIP>;
        USERPWDs: $data.EntitySet<typeof MSNAdmin.Models.USERPWD, MSNAdmin.Models.USERPWD>;
        USERSERVICETIMEREOCRDs: $data.EntitySet<typeof MSNAdmin.Models.USERSERVICETIMEREOCRD, MSNAdmin.Models.USERSERVICETIMEREOCRD>;
        SERVICEBIDs: $data.EntitySet<typeof MSNAdmin.Models.SERVICEBID, MSNAdmin.Models.SERVICEBID>;
        SERVICECATEGORies: $data.EntitySet<typeof MSNAdmin.Models.SERVICECATEGORY, MSNAdmin.Models.SERVICECATEGORY>;
        SERVICESTATEs: $data.EntitySet<typeof MSNAdmin.Models.SERVICESTATE, MSNAdmin.Models.SERVICESTATE>;
        SERVICESUBCATEGORies: $data.EntitySet<typeof MSNAdmin.Models.SERVICESUBCATEGORY, MSNAdmin.Models.SERVICESUBCATEGORY>;
        SERVICETIMETYPEs: $data.EntitySet<typeof MSNAdmin.Models.SERVICETIMETYPE, MSNAdmin.Models.SERVICETIMETYPE>;
        SOCIALLOGINs: $data.EntitySet<typeof MSNAdmin.Models.SOCIALLOGIN, MSNAdmin.Models.SOCIALLOGIN>;
        USERBIDS: $data.EntitySet<typeof MSNAdmin.Models.USERBID, MSNAdmin.Models.USERBID>;
        USERFUNDS: $data.EntitySet<typeof MSNAdmin.Models.USERFUND, MSNAdmin.Models.USERFUND>;
        USERINFOes: $data.EntitySet<typeof MSNAdmin.Models.USERINFO, MSNAdmin.Models.USERINFO>;
        ADMININFOes: $data.EntitySet<typeof MSNAdmin.Models.ADMININFO, MSNAdmin.Models.ADMININFO>;
        USERMEMBERSHIPs: $data.EntitySet<typeof MSNAdmin.Models.USERMEMBERSHIP, MSNAdmin.Models.USERMEMBERSHIP>;
        USERSERVICEs: $data.EntitySet<typeof MSNAdmin.Models.USERSERVICE, MSNAdmin.Models.USERSERVICE>;
        USERSERVICENEEDs: $data.EntitySet<typeof MSNAdmin.Models.USERSERVICENEED, MSNAdmin.Models.USERSERVICENEED>;
    }

}
export {MSN as MSN}

export var type: typeof MSN.Container;
export var factory: (config:any) => MSN.Container;